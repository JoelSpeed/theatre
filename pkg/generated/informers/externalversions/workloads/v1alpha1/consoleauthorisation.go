/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	time "time"

	versioned "github.com/gocardless/theatre/pkg/generated/clientset/versioned"
	internalinterfaces "github.com/gocardless/theatre/pkg/generated/informers/externalversions/internalinterfaces"
	v1alpha1 "github.com/gocardless/theatre/pkg/generated/listers/workloads/v1alpha1"
	workloadsv1alpha1 "github.com/gocardless/theatre/v3/apis/workloads/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// ConsoleAuthorisationInformer provides access to a shared informer and lister for
// ConsoleAuthorisations.
type ConsoleAuthorisationInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.ConsoleAuthorisationLister
}

type consoleAuthorisationInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewConsoleAuthorisationInformer constructs a new informer for ConsoleAuthorisation type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewConsoleAuthorisationInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredConsoleAuthorisationInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredConsoleAuthorisationInformer constructs a new informer for ConsoleAuthorisation type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredConsoleAuthorisationInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WorkloadsV1alpha1().ConsoleAuthorisations(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WorkloadsV1alpha1().ConsoleAuthorisations(namespace).Watch(context.TODO(), options)
			},
		},
		&workloadsv1alpha1.ConsoleAuthorisation{},
		resyncPeriod,
		indexers,
	)
}

func (f *consoleAuthorisationInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredConsoleAuthorisationInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *consoleAuthorisationInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&workloadsv1alpha1.ConsoleAuthorisation{}, f.defaultInformer)
}

func (f *consoleAuthorisationInformer) Lister() v1alpha1.ConsoleAuthorisationLister {
	return v1alpha1.NewConsoleAuthorisationLister(f.Informer().GetIndexer())
}
