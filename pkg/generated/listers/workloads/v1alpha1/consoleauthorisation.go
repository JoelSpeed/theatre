/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/gocardless/theatre/v3/apis/workloads/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConsoleAuthorisationLister helps list ConsoleAuthorisations.
// All objects returned here must be treated as read-only.
type ConsoleAuthorisationLister interface {
	// List lists all ConsoleAuthorisations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConsoleAuthorisation, err error)
	// ConsoleAuthorisations returns an object that can list and get ConsoleAuthorisations.
	ConsoleAuthorisations(namespace string) ConsoleAuthorisationNamespaceLister
	ConsoleAuthorisationListerExpansion
}

// consoleAuthorisationLister implements the ConsoleAuthorisationLister interface.
type consoleAuthorisationLister struct {
	indexer cache.Indexer
}

// NewConsoleAuthorisationLister returns a new ConsoleAuthorisationLister.
func NewConsoleAuthorisationLister(indexer cache.Indexer) ConsoleAuthorisationLister {
	return &consoleAuthorisationLister{indexer: indexer}
}

// List lists all ConsoleAuthorisations in the indexer.
func (s *consoleAuthorisationLister) List(selector labels.Selector) (ret []*v1alpha1.ConsoleAuthorisation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConsoleAuthorisation))
	})
	return ret, err
}

// ConsoleAuthorisations returns an object that can list and get ConsoleAuthorisations.
func (s *consoleAuthorisationLister) ConsoleAuthorisations(namespace string) ConsoleAuthorisationNamespaceLister {
	return consoleAuthorisationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConsoleAuthorisationNamespaceLister helps list and get ConsoleAuthorisations.
// All objects returned here must be treated as read-only.
type ConsoleAuthorisationNamespaceLister interface {
	// List lists all ConsoleAuthorisations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConsoleAuthorisation, err error)
	// Get retrieves the ConsoleAuthorisation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ConsoleAuthorisation, error)
	ConsoleAuthorisationNamespaceListerExpansion
}

// consoleAuthorisationNamespaceLister implements the ConsoleAuthorisationNamespaceLister
// interface.
type consoleAuthorisationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConsoleAuthorisations in the indexer for a given namespace.
func (s consoleAuthorisationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConsoleAuthorisation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConsoleAuthorisation))
	})
	return ret, err
}

// Get retrieves the ConsoleAuthorisation from the indexer for a given namespace and name.
func (s consoleAuthorisationNamespaceLister) Get(name string) (*v1alpha1.ConsoleAuthorisation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("consoleauthorisation"), name)
	}
	return obj.(*v1alpha1.ConsoleAuthorisation), nil
}
